// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

namespace WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211015043009_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("WebAPI.Domain.BalanceTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Balance")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2021, 10, 15, 0, 30, 8, 915, DateTimeKind.Local).AddTicks(1539));

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("BalanceTransactions");
                });

            modelBuilder.Entity("WebAPI.Domain.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2021, 10, 15, 0, 30, 8, 930, DateTimeKind.Local).AddTicks(3499));

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("TotalBets")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalPlayers")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("WebAPI.Domain.BetOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BetId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DidWin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2021, 10, 15, 0, 30, 8, 934, DateTimeKind.Local).AddTicks(7608));

                    b.Property<float>("Stake")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("TotalBets")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalPlayers")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.ToTable("BetOptions");
                });

            modelBuilder.Entity("WebAPI.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Balance")
                        .IsRequired()
                        .HasColumnType("REAL");

                    b.Property<int?>("CVV")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreditCardExpirationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentificationDocument")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2021, 10, 15, 0, 30, 8, 938, DateTimeKind.Local).AddTicks(2610));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAPI.Domain.UserBet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int>("BetOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2021, 10, 15, 0, 30, 8, 932, DateTimeKind.Local).AddTicks(6536));

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BetOptionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBets");
                });

            modelBuilder.Entity("WebAPI.Domain.BalanceTransaction", b =>
                {
                    b.HasOne("WebAPI.Domain.User", "User")
                        .WithMany("BalanceTransactions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Domain.BetOption", b =>
                {
                    b.HasOne("WebAPI.Domain.Bet", "Bet")
                        .WithMany("BetOptions")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");
                });

            modelBuilder.Entity("WebAPI.Domain.UserBet", b =>
                {
                    b.HasOne("WebAPI.Domain.BetOption", "BetOption")
                        .WithMany("UserBets")
                        .HasForeignKey("BetOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Domain.User", "User")
                        .WithMany("UserBets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BetOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Domain.Bet", b =>
                {
                    b.Navigation("BetOptions");
                });

            modelBuilder.Entity("WebAPI.Domain.BetOption", b =>
                {
                    b.Navigation("UserBets");
                });

            modelBuilder.Entity("WebAPI.Domain.User", b =>
                {
                    b.Navigation("BalanceTransactions");

                    b.Navigation("UserBets");
                });
#pragma warning restore 612, 618
        }
    }
}
